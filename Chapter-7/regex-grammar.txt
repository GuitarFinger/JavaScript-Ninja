=====================================正则表达式语法
1.1 正则表达式解释
    "正则表达式(regular expression)"：通常称为一种模式，是一个用简单方式描述或者匹配一系列符合某个句法规则的字符串。
    (1) 创建正则表达式
        使用正则字面量：var pattern = /test/;
        构建一个RegExp实例,将正则作为字符串传入：var pattern = new RegExp("text");
    (2) 正则使用方式优先级
        在开发过程中，如果正则是已知的，则优先选择字面量语法，而构建器方式则是用于在运行时，通过动态构建字符串来构建正则表达式。
    (3) 三个标志
        i ——让正则表达式不区分大小写，所有/test/i 不仅可以匹配“test”，还可以匹配“Test” "TEST" "tEsT" 等。
        g ——匹配模式中的所有实例，而不是默认只匹配第一次出现的结果。
        m ——允许匹配多个行，比如可以匹配文本区元素中的值。

1.2 术语与操作符
    (1) 精确匹配：如果一个字符串不是特殊字符或操作符，则表示该字符必须在表达式中出现。例如：
        在/test/正则中，有4个术语，它们表示这些字符必须在一个字符串中出现才能匹配该模式。
    (2) 匹配一类字符：
        a.匹配一个有限字符集中的某一个字符。可以通过将字符集放到中括号内，来指定该字符集操作符：
            [abc]：要匹配“a” "b" 和 “c” 中的任意一个字符，这个表达式只能匹配候选字符串中的一个字符。
        b.匹配一组有限字符集以外的字符。
            [^abc]：除了“a” "b" 或 “c” 以外的任意字符。
        c.匹配一个范围内的字符串：
            [a-m]: 中横线表示从“a” 到 “m” 之间的所有字符(包含a和m，按字典顺序)都在该字符集内。
    (3) 转义：使用反斜杠\可以对任意字符进行转义，让被转移字符作为字符本身进行匹配。
            \[表示要匹配[字符，而不是匹配表达式的开括号。\\则匹配一个反斜杠
    (4) 匹配开始与匹配结束：
        a.匹配开始(^)：如果作为正则表达式的第一个字符，则表示要从字符串的开头进行匹配。
            /^test/：只有匹配以“test”开头的字符串(注意，这只是^字符的一个重载，它还可以用于否定一个字符类集)
            /test$/: 表示该模式必须出现在字符串的结尾。
1.3 重复出现
    (1) 在一个字符后面加一个问号(? ): 定义为该字符是可选的，就是可以出现一次或根本不出现，例如：
        /t?est/：可以匹配“test”和“est”.
    (2) 在一个字符后面加一个加号(+): 表示一个字符要出现一次或多次，例如：
        /t+est/：可以匹配“test” “ttest” “tttest” 而不能匹配“est”.
    (3) 在一个字符后面加一个星号(*)：表示一个字符要出现零次或多次，例如：
        /t*est/：可以匹配“test” “ttest” “est”。
    (4) 在一个字符后面的花括号里指定一个数字：表示重复次数。例如：
        /a{4}/：表示匹配含有连续四个“a”字符的字符串。
    (5) 在一个字符后面的花括号里指定两个数字(用逗号隔开)：表示重复次数区间。例如：
        /a{4,10}/：表示匹配任何含有连续4个至10个“a”字符的字符串。
    (6) 次数区间的第二个值是可选的(但要保留逗号)：表示一个开区间。例如：
        /a{4,}/：表示匹配任何含有连续4个或多于4个“a”字符的字符串。